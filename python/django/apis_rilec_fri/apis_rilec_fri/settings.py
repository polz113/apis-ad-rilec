"""
Django settings for apis_rilec_fri project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import environ
import ldap

root = environ.Path(__file__) - 3  # get root of the project
env = environ.Env()
environ.Env.read_env()  # reading .env file

SITE_ROOT = root()

DEBUG = env.bool('DEBUG', default=False)


TEMPLATE_DEBUG = DEBUG

if DEBUG:
    SILKY_PYTHON_PROFILER=True

ldap_options_dict = {
    "NEVER": ldap.OPT_X_TLS_NEVER,
    "ALLOW": ldap.OPT_X_TLS_ALLOW,
    "DEMAND": ldap.OPT_X_TLS_DEMAND,
    "HARD": ldap.OPT_X_TLS_HARD,
}

ldap_scope_dict = {
    "SUBTREE": ldap.SCOPE_SUBTREE,
    "BASE": ldap.SCOPE_BASE,
    "ONELEVEL": ldap.SCOPE_ONELEVEL,
}


LDAP_SERVER_URI = env.str('LDAP_SERVER_URI')
LDAP_BIND_DN = env.str("LDAP_BIND_DN") 
LDAP_BIND_PASSWORD = env.str("LDAP_BIND_PASSWORD")
# LDAP_START_TLS = True
LDAP_START_TLS = env.bool('LDAP_START_TLS')

LDAP_USER_SEARCH_BASE = env.str("LDAP_USER_SEARCH_BASE")
LDAP_USER_SEARCH_SCOPE = ldap_scope_dict[env.str("LDAP_USER_SEARCH_SCOPE", default="SUBTREE")]
LDAP_USER_SEARCH_FILTERSTR = ldap_scope_dict[env.str("LDAP_USER_SEARCH_FILTERSTR", default="(objectClass=*)")]
LDAP_GROUP_SEARCH_BASE = env.str("LDAP_GROUP_SEARCH_BASE")
LDAP_GROUP_SEARCH_SCOPE = ldap_scope_dict[env.str("LDAP_GROUP_SEARCH_SCOPE", default="SUBTREE")]
#AUTH_LDAP_USER_SEARCH = LDAPSearch(
#        env.str( "LDAP_USER_SEARCH_BASE"),
#        ldap_scope_dict[env.str("LDAP_USER_SEARCH_SCOPE", default="SUBTREE")], 
#        "(objectClass=group)"
#    )

LDAP_GLOBAL_OPTIONS = {
    ldap.OPT_X_TLS_REQUIRE_CERT: ldap_options_dict[env.str("LDAP_OPT_X_TLS_REQUIRE_CERT", default="NEVER")]
}

# Mirror groups in LDAP
#AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
#    env.str("LDAP_GROUP_SEARCH_BASE"),
#    ldap_scope_dict[env.str("LDAP_GROUP_SEARCH_SCOPE", default="SUBTREE")], 
#    "(objectClass=group)"
#)

# LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")
AUTH_LDAP_MIRROR_GROUPS = env.bool("AUTH_LDAP_MIRROR_GROUPS", default=True)
#LDAP_REQUIRE_GROUP = "cn=enabled,ou=django,ou=groups,dc=example,dc=com"
# Populate the Django user from the LDAP directory.

AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

#LDAP_PROFILE_ATTR_MAP = 
# LDAP_USER_FLAGS_BY_GROUP = 
AUTH_LDAP_ALWAYS_UPDATE_USER = env.bool("AUTH_LDAP_ALWAYS_UPDATE_USER", default=True)
# Use LDAP group membership to calculate group permissions.
#LDAP_FIND_GROUP_PERMS = True
# Cache group memberships for an hour to minimize LDAP traffic
AUTH_LDAP_CACHE_GROUPS = env.bool("AUTH_LDAP_CACHE_GROUPS", default=True)
AUTH_LDAP_GROUP_CACHE_TIMEOUT = env.int("AUTH_GROUP_CACHE_TIMEOUT", default=3600)



AUTH_LDAP_SERVER_URI=LDAP_SERVER_URI 
AUTH_LDAP_BIND_DN=LDAP_BIND_DN 
AUTH_LDAP_BIND_PASSWORD=LDAP_BIND_PASSWORD 
AUTH_LDAP_START_TLS=LDAP_START_TLS 
#AUTH_LDAP_USER_SEARCH=LDAP_USER_SEARCH 
AUTH_LDAP_GLOBAL_OPTIONS=LDAP_GLOBAL_OPTIONS 
#AUTH_LDAP_GROUP_SEARCH=LDAP_GROUP_SEARCH 
# AUTH_LDAP_GROUP_TYPE=LDAP_GROUP_TYPE 
#AUTH_LDAP_REQUIRE_GROUP=LDAP_REQUIRE_GROUP 
# Populate the Django user from the LDAP directory.
#AUTH_LDAP_PROFILE_ATTR_MAP=LDAP_PROFILE_ATTR_MAP 
# AUTH_LDAP_USER_FLAGS_BY_GROUP=LDAP_USER_FLAGS_BY_GROUP 
# Use LDAP group membership to calculate group permissions.
#AUTH_LDAP_FIND_GROUP_PERMS=LDAP_FIND_GROUP_PERMS 





public_root = environ.Path(env.str('PUBLIC_ROOT', default=root.path('public/')))
MEDIA_ROOT = public_root('media')
MEDIA_URL = env.str('MEDIA_URL', default='media/')
STATIC_ROOT = public_root('static')



X_API_KEY = env.str('X_API_KEY')
STUDIS_API_TOKEN = env.str('STUDIS_API_TOKEN')
STUDIS_API_BASE_URL = env.str('STUDIS_API_BASE_URL', default="https://studisfri.uni-lj.si/api")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')


ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])


# Application definition

INSTALLED_APPS = [
    "apis_rilec",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "rest_framework_api_key",
]

if DEBUG:
    INSTALLED_APPS += [
        "silk",
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    MIDDLEWARE += [
        'silk.middleware.SilkyMiddleware',
    ]

ROOT_URLCONF = 'apis_rilec_fri.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apis_rilec_fri.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {'default': env.db('DATABASE_URL', default="sqlite:///" + str(BASE_DIR / 'db.sqlite3'))}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = env.str('STATIC_URL', default='static/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

